@page "/comments"
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Generic
@using System


@using CineSync.Data.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Threading.Tasks

<div class="comment-section">
    @if (Commentss != null && Commentss.Any())
    {
        @foreach (var comment in Commentss)
        {
            <div class="comment">
                <div class="comment-header">
                    <span>@comment.Autor.UserName</span>
                    <span>@comment.NumberOfLikes Likes</span>
                    <span>@comment.NumberOfDeslikes Dislikes</span>
                </div>
                <div class="comment-content">
                    <p>@comment.Content</p>
                    @if (comment.Attachements != null && comment.Attachements.Any())
                    {
                        <div class="attachments">
                          
                        </div>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <p>No comments yet.</p>
    }
</div>

<div class="add-comment">
    <h4>Add a Comment</h4>
    <EditForm Model="newComment" OnValidSubmit="HandleSubmit" FormName="commentForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="content">Content:</label>
            <textarea id="content" @bind="newComment.Content" class="form-control" ></textarea>
            <ValidationMessage For="@(() => newComment.Content)" />
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public ICollection<Comment> Commentss { get; set; }

    List<Comment> comments = new List<Comment>();
    Comment newComment = new Comment();

    async Task HandleSubmit(EditContext editContext)
    {
        if (editContext.Validate())
        {
            AddComment();
        }
        else
        {
            // Handle validation errors if needed
        }
    }

    void AddComment()
    {
        // Add the new comment to the list
        comments.Add(newComment);

        // Clear the new comment
        newComment = new Comment();
    }
}
