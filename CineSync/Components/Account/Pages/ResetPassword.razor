@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CineSync.Data
@using CineSync.Components.Buttons
@using CineSync.Components.Utils

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<div class="page">
    <div class="form-container">
        <h1 class="text-center text-white user-select-none">Reset Password</h1>
        <div class="row">
            <div class="col-md-12">
                <StatusMessage Message="@Message"/>
                <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    <hr class="text-white"/>
                    <ValidationSummary class="text-danger" role="alert"/>

                    <input type="hidden" name="Input.Code" value="@Input.Code"/>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control user-select-none" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                        <label for="email" class="form-label user-select-none">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger"/>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control user-select-none" autocomplete="new-password" aria-required="true" placeholder="Please enter your password."/>
                        <label for="password" class="form-label user-select-none">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger"/>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control user-select-none" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password."/>
                        <label for="confirm-password" class="form-label user-select-none">Confirm password</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
                    </div>
                    <div class="d-flex w-100 justify-content-center align-items-center user-select-none">
                        <RectButton1 Text="Reset" OnClick="async () => { await OnValidSubmitAsync(); }"/>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] 
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] 
    private string? Code { get; set; }
    
    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }
        
        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required] public string Code { get; set; } = "";
    }

}