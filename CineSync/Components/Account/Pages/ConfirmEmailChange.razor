@page "/Account/ConfirmEmailChange"
@rendermode InteractiveServer

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CineSync.Data
@using CineSync.Components.Buttons
@using CineSync.Components.Utils

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager Navigation

<div class="page">
    <div class="main-content">
        <div class="form-container">
            <h1 class="text-center text-white">Confirm email change</h1>
            <hr class="text-white"/>
            <StateMessage Message="@message"/>
            <div class="logo-container-main">
                <div @onclick="GoHome">
                    <img id="logo" src="../logo.png" alt="CineSync Main Logo">
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <RectButton1 Text="Home" OnClick="GoHome"/>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Email is null || Code is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error: Invalid email change confirmation link.", HttpContext);
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            message = "Unable to find user with Id '{userId}'";
            return;
        }

        var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        var result = await UserManager.ChangeEmailAsync(user, Email, code);
        if (!result.Succeeded)
        {
            if (result.Errors.Any(e=> e.Code == "InvalidToken"))
            {
                message = "Error: Email already has been changed.";
                StateHasChanged();
                return;
            }
            message = "Your email is unchanged.";
            StateHasChanged();
            return;
        }

        // In our UI email and username are one and the same, so when we update the email
        // we need to update the username.
        // var setUserNameResult = await UserManager.SetUserNameAsync(user, Email);
        // if (!setUserNameResult.Succeeded)
        // {
        //     message = "Error changing username.";
        //     return;
        // }

        // await SignInManager.RefreshSignInAsync(user);
        message = "Thank you for confirming your email change.";
    }
    
    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }
}
