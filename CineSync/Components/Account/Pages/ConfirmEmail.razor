@page "/Account/ConfirmEmail"
@rendermode InteractiveServer

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CineSync.Data
@using CineSync.Components.Buttons
@using CineSync.Components.Utils

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager

<div style="background-color:rgb(0 164 255); height:100vh;">

    <div class="navbar">
        <div class="navbar-left">

            <NavLink href="/">
                <div class="home-button">
                    <div class="navbar-item-conteiner user-select-none">
                        <img class="Minilogo" src="MiniLogo.png" alt="CineSync MiniLogo">
                    </div>
                    <div class="navbar-item-conteiner navbar-title user-select-none">CineSync</div>
                </div>
            </NavLink>

        </div>
        <div class="navbar-rigth">

            <div class="navbar-item-conteiner">
                <NavLink href="/">
                    <button class="login-button user-select-none">Home</button>
                </NavLink>
            </div>        

        </div>
    </div>

    <div class="page">
        <div class="main-content">
            <div class="form-container">
                <h1 class="text-center text-white">Confirm email</h1>
                <hr class="text-white"/>
                <StateMessage Message="@statusMessage"/>
                <div class="logo-container-main" >
                    <div @onclick="Gologin">
                        <img id="logo" src="../logo.png" alt="CineSync Main Logo">
                    </div>
                </div>
                <div class="d-flex justify-content-center">
                    <RectButton1 Text="Login" OnClick="Gologin" />
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    private string statusMessage = string.Empty;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? UserId { get; set; }

    [SupplyParameterFromQuery] private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            // HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error: User not found";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
        }
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void Gologin()
    {
        NavigationManager.NavigateTo("/Account/Login");
    }

}