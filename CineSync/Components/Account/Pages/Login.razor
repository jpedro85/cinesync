@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CineSync.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<div class="page">

    <div class="main-content">
        <div class="form-container">
            <h1 class="text-center text-white">Log in</h1>
            <div class="row">
                <div class="col-md-12">
                    <section>
                        <StatusMessage Message="@errorMessage"/>
                        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                            <DataAnnotationsValidator/>
                            <hr/>
                            <ValidationSummary class="text-danger" role="alert"/>
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                                <label for="email" class="form-label">Email</label>
                                <ValidationMessage For="() => Input.Email" class="text-danger"/>
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
                                <label for="password" class="form-label">Password</label>
                                <ValidationMessage For="() => Input.Password" class="text-danger"/>
                            </div>
                            <div class="login-container">
                                <button type="submit" class="login-btn">Log in</button>
                            </div>
                            <div>
                                <p>
                                    <a href="Account/ForgotPassword">Forgot your password?</a>
                                </p>
                                <p>
                                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                                </p>
                                <p>
                                    <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                                </p>
                            </div>
                        </EditForm>
                    </section>
                </div>
            </div>
        </div>
    </div>

    <div class="logo-container-main">
        <img id="logo" src="../logo.png" alt="CineSync Main Logo">
    </div>

</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        ApplicationUser? User = await UserManager.FindByEmailAsync(Input.Email);
        if (User == null)
        {
            errorMessage = "Error: Invalid Email.";
            return;
        }

        SignInResult result = await SignInManager.PasswordSignInAsync(User, Input.Password, Input.RememberMe, false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else if (result.IsNotAllowed)
        {
            errorMessage = "Error: Your account is not activated. Please check your email for the activation link";
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}